package uk.ac.hud.postroom.ui.textpane;

import uk.ac.hud.postroom.assembler.*;

import javax.swing.text.*;
import uk.ac.hud.postroom.event.*;

/**
 * Custom StyledDocument which highlights text based on Syntax
 * @author Richard Walton (c0410542@uk.ac.hud)
 */
public class SourceFileDocument extends DefaultStyledDocument {
    
    private Tokenizer tokenizer;
    
    /**
     * Constructs a new SourceFileDocument
     */
    public SourceFileDocument() {
        tokenizer = new Tokenizer("");
        
        EditorStyles.addEditorStylesListener(new EditorStylesListener() {
            public void fontChanged() {
                recolour();
            }
        });
    }
    
    /** @inheritDoc **/
    @Override public void insertString(int offset, String string, AttributeSet attributes)
            throws BadLocationException {
        // Inserts the string
        super.insertString(offset, string, attributes);
        
        // Performs recolouring
        recolour();
    }
    
    /** @inheritDoc **/
    @Override public void remove(int offset, int length) throws BadLocationException {
        // Removes the text
        super.remove(offset, length);
        
        // Performs recolouring
        recolour();
    }
    
    /**
     * Returns the tokenizer used to generate tokens for recolouring.  This tokenizer
     * will always have an up to date version of the document text set as the input
     * @return Tokenizer using to generate tokens for recolouring
     */
    public Tokenizer getTokenizer() {
        return tokenizer;
    }
    
    /**
     * Recolours text based on Syntax generated by the Tokenizer class
     */
    public void recolour() {
        try{          
            /* Loops though all the tokens generated from the document
             * text by a tokenizer and applys the attributes 
             * stored in the SyntaxStyles class */

            tokenizer.setInput(getText(0, getLength()));

            int offset = 0;
            for(Token[] line : tokenizer.tokenize()){
                for(Token token : line){
                    // Get the length of the token
                    int length = token.getValue().length();

                    // Replace the character attributes with new ones from the SyntaxStyles class
                    setCharacterAttributes(offset, length, 
                        EditorStyles.getStyle(token.getType()), true);

                    offset = offset + length;
                }
            }
        }catch (BadLocationException e){
            e.printStackTrace();
        }
    }
}